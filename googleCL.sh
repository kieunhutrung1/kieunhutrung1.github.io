#!/bin/bash
# merged-tool.sh ‚Äî Menu t·ªïng h·ª£p (Google Cloud + Proxy/API)
# Y√™u c·∫ßu: bash, gcloud (ƒë√£ auth), curl, python3
# T√°c gi·∫£: h·ª£p nh·∫•t t·ª´ googleCL.sh v√† trung-fix.sh

set -euo pipefail

# ======================== TI·ªÜN √çCH CHUNG ========================
pause() {
  read -rp $'\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...' _
}

need_cmd() {
  command -v "$1" >/dev/null 2>&1 || {
    echo "‚ö†Ô∏è Thi·∫øu l·ªánh: $1. Vui l√≤ng c√†i ƒë·∫∑t tr∆∞·ªõc khi d√πng ch·ª©c nƒÉng li√™n quan."
    return 1
  }
}

# ======================== PH·∫¶N GOOGLE CLOUD ========================
# ---- create_ip_batch (t·ª´ googleCL.sh) ----
create_ip_batch() {
  echo -e "\nüåç Ch·ªçn khu v·ª±c t·∫°o IP:"
  echo "1) Tokyo (asia-northeast1)"
  echo "2) Osaka (asia-northeast2)"
  read -p "Nh·∫≠p s·ªë [1-2]: " REGION_CHOICE

  case $REGION_CHOICE in
    1) REGION="asia-northeast1" ;;
    2) REGION="asia-northeast2" ;;
    *) echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."; return ;;
  esac

  echo -e "\nüì∂ Ch·ªçn Network Tier cho IP:"
  echo "1) STANDARD (gi√° r·∫ª) üîπ"
  echo "2) PREMIUM"
  read -p "üí° Nh·∫≠p l·ª±a ch·ªçn [1-2] (m·∫∑c ƒë·ªãnh: 1): " TIER_OPTION
  TIER_OPTION=${TIER_OPTION:-1}
  NETWORK_TIER="STANDARD"
  [[ "$TIER_OPTION" == "2" ]] && NETWORK_TIER="PREMIUM"

  read -p "üî¢ Nh·∫≠p s·ªë l∆∞·ª£ng IP mu·ªën t·∫°o: " IP_COUNT
  if ! [[ "$IP_COUNT" =~ ^[0-9]+$ ]] || [ "$IP_COUNT" -le 0 ]; then
    echo "‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá."; return
  fi

  echo -e "\nüöÄ ƒêang t·∫°o $IP_COUNT IP ($NETWORK_TIER) t·∫°i v√πng $REGION..."
  for ((i=1; i<=IP_COUNT; i++)); do
    IP_NAME="custom-ip-$RANDOM"
    if gcloud compute addresses create "$IP_NAME" --region="$REGION" --network-tier="$NETWORK_TIER" --quiet; then
      IP_ADDR=$(gcloud compute addresses describe "$IP_NAME" --region="$REGION" --format="get(address)")
      echo "‚úÖ ƒê√£ t·∫°o IP [$IP_ADDR] t√™n [$IP_NAME] t·∫°i [$REGION]"
    else
      echo "‚ùå Kh√¥ng th·ªÉ t·∫°o IP [$IP_NAME]. C√≥ th·ªÉ v∆∞·ª£t quota."
    fi
  done
}

# ---- create_firewall_rule_random (t·ª´ googleCL.sh) ----
create_firewall_rule_random() {
  echo -e "\nüåê ƒêang t·∫°o firewall rule..."
  read -p "üîê Nh·∫≠p port c·∫ßn m·ªü (v√≠ d·ª•: 22 ho·∫∑c 22,80,443): " PORTS
  if [[ -z "$PORTS" ]]; then
    echo "‚ùå B·∫°n ch∆∞a nh·∫≠p port."
    return
  fi
  RULE_NAME="fw-rule-$(date +%Y%m%d-%H%M%S)-$RANDOM"
  echo "‚öôÔ∏è ƒêang t·∫°o rule c√≥ t√™n: $RULE_NAME"

  gcloud compute firewall-rules create "$RULE_NAME" \
    --direction=INGRESS \
    --priority=1000 \
    --network=default \
    --action=ALLOW \
    --rules="tcp:$PORTS" \
    --source-ranges=0.0.0.0/0

  if [ $? -eq 0 ]; then
    echo "‚úÖ ƒê√£ t·∫°o firewall rule: $RULE_NAME cho port: $PORTS"
  else
    echo "‚ùå L·ªói khi t·∫°o firewall rule."
  fi
}

# ---- create_vm_flow (t·ª´ googleCL.sh) ----
create_vm_flow() {
  zones_tokyo=("asia-northeast1-a" "asia-northeast1-b" "asia-northeast1-c")
  zones_osaka=("asia-northeast2-a" "asia-northeast2-b" "asia-northeast2-c")

  echo -e "\nüåè Nh·∫≠p s·ªë l∆∞·ª£ng VM Tokyo mu·ªën t·∫°o (0 ƒë·ªÉ b·ªè, m·∫∑c ƒë·ªãnh 4): "
  read -p "Tokyo: " COUNT_TOKYO
  COUNT_TOKYO=${COUNT_TOKYO:-4}
  [[ ! "$COUNT_TOKYO" =~ ^[0-9]+$ ]] && COUNT_TOKYO=4

  echo -e "\nüåè Nh·∫≠p s·ªë l∆∞·ª£ng VM Osaka mu·ªën t·∫°o (0 ƒë·ªÉ b·ªè, m·∫∑c ƒë·ªãnh 4): "
  read -p "Osaka: " COUNT_OSAKA
  COUNT_OSAKA=${COUNT_OSAKA:-4}
  [[ ! "$COUNT_OSAKA" =~ ^[0-9]+$ ]] && COUNT_OSAKA=4

  if [ "$COUNT_TOKYO" -eq 0 ] && [ "$COUNT_OSAKA" -eq 0 ]; then
    echo "‚ùå C·∫ßn t·∫°o √≠t nh·∫•t VM ·ªü 1 v√πng. Tho√°t."
    return
  fi

  read -p "‚úèÔ∏è Nh·∫≠p prefix t√™n VM Tokyo (m·∫∑c ƒë·ªãnh: tokyo): " CUSTOM_PREFIX_TOKYO
  PREFIX_TOKYO=${CUSTOM_PREFIX_TOKYO:-tokyo}

  read -p "‚úèÔ∏è Nh·∫≠p prefix t√™n VM Osaka (m·∫∑c ƒë·ªãnh: osaka): " CUSTOM_PREFIX_OSAKA
  PREFIX_OSAKA=${CUSTOM_PREFIX_OSAKA:-osaka}

  echo "üåê Ch·ªçn lo·∫°i IP:"
  echo "1) C√≥ IP c√¥ng c·ªông (Public IP ‚Äì s·∫Ω g√°n IP tƒ©nh ri√™ng)"
  echo "2) Kh√¥ng c√≥ IP c√¥ng c·ªông (Private only)"
  read -p "üîå Nh·∫≠p l·ª±a ch·ªçn [1-2] (m·∫∑c ƒë·ªãnh: 1): " IP_OPTION
  IP_OPTION=${IP_OPTION:-1}

  NETWORK_TIER="STANDARD"
  if [ "$IP_OPTION" == "1" ]; then
    echo "üì∂ Ch·ªçn Network Tier cho IP:"
    echo "1) STANDARD üîπ"
    echo "2) PREMIUM"
    read -p "üí° Nh·∫≠p l·ª±a ch·ªçn [1-2] (m·∫∑c ƒë·ªãnh: 1): " TIER_OPTION
    TIER_OPTION=${TIER_OPTION:-1}
    [[ "$TIER_OPTION" == "2" ]] && NETWORK_TIER="PREMIUM"
  fi

  create_vms_in_zone() {
    local COUNT=$1
    local PREFIX=$2
    local ZONES=("${!3}")
    for ((i=1; i<=COUNT; i++)); do
      ZONE="${ZONES[((i-1)%${#ZONES[@]})]}"
      REGION=$(echo "$ZONE" | rev | cut -d'-' -f2- | rev)
      num=$(printf "%02d" $((RANDOM % 100)))
      name="${PREFIX}${num}"

      if gcloud compute instances describe "$name" --zone="$ZONE" &>/dev/null; then
        echo "‚ö†Ô∏è VM $name ƒë√£ t·ªìn t·∫°i ·ªü $ZONE. B·ªè qua."
        continue
      fi

      if [ "$IP_OPTION" == "1" ]; then
        IP_NAME="ip-${name}"
        echo "‚öôÔ∏è T·∫°o IP tƒ©nh [$IP_NAME] trong [$REGION]..."
        if ! gcloud compute addresses create "$IP_NAME" --region="$REGION" --network-tier="$NETWORK_TIER" --quiet; then
          echo "‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c IP [$IP_NAME]. B·ªè qua VM."
          continue
        fi
        STATIC_IP=$(gcloud compute addresses describe "$IP_NAME" --region="$REGION" --format="get(address)")
        echo "üõ†Ô∏è T·∫°o VM [$name] ·ªü $ZONE v·ªõi IP: $STATIC_IP"
        gcloud compute instances create "$name" \
          --zone="$ZONE" \
          --machine-type=e2-micro \
          --image=ubuntu-minimal-2404-noble-amd64-v20250624 \
          --image-project=ubuntu-os-cloud \
          --boot-disk-size=10GB \
          --address="$STATIC_IP" \
          --network-tier="$NETWORK_TIER"
        echo "$name,$STATIC_IP,$ZONE" >> created_vms.log
      else
        echo "üîí T·∫°o VM [$name] kh√¥ng c√≥ IP c√¥ng c·ªông ·ªü $ZONE"
        gcloud compute instances create "$name" \
          --zone="$ZONE" \
          --machine-type=e2-micro \
          --image=ubuntu-minimal-2404-noble-amd64-v20250624 \
          --image-project=ubuntu-os-cloud \
          --boot-disk-size=10GB \
          --no-address
        echo "$name,NONE,$ZONE" >> created_vms.log
      fi
      echo "‚úÖ ƒê√£ t·∫°o: $name"
    done
  }

  [ "$COUNT_TOKYO" -gt 0 ] && create_vms_in_zone "$COUNT_TOKYO" "$PREFIX_TOKYO" zones_tokyo[@]
  [ "$COUNT_OSAKA" -gt 0 ] && create_vms_in_zone "$COUNT_OSAKA" "$PREFIX_OSAKA" zones_osaka[@]
  echo "üöÄ Ho√†n th√†nh t·∫°o VM."
}

# ---- change_ip_flow (t·ª´ googleCL.sh) ----
change_ip_flow() {
  echo "üì¶ L·∫•y danh s√°ch VM..."
  INSTANCES=($(gcloud compute instances list --format="value(name)"))
  [ ${#INSTANCES[@]} -eq 0 ] && echo "‚ùå Kh√¥ng c√≥ VM n√†o." && return

  echo "üíª Ch·ªçn VM ƒë·ªÉ ƒë·ªïi IP:"
  select INSTANCE_NAME in "${INSTANCES[@]}"; do
    [ -n "$INSTANCE_NAME" ] && break
  done

  ZONE=$(gcloud compute instances list --filter="name=($INSTANCE_NAME)" --format="value(zone)" | rev | cut -d'/' -f1 | rev)
  REGION=$(echo "$ZONE" | rev | cut -d'-' -f2- | rev)

  echo "üì∂ Ch·ªçn Network Tier cho IP m·ªõi:"
  echo "1) STANDARD üîπ"
  echo "2) PREMIUM"
  read -p "üí° Nh·∫≠p l·ª±a ch·ªçn [1-2] (m·∫∑c ƒë·ªãnh: 1): " TIER_OPTION
  TIER_OPTION=${TIER_OPTION:-1}
  NETWORK_TIER="STANDARD"
  [[ "$TIER_OPTION" == "2" ]] && NETWORK_TIER="PREMIUM"

  IP_NAME="static-ip-$RANDOM"
  gcloud compute addresses create "$IP_NAME" --region="$REGION" --network-tier="$NETWORK_TIER" --quiet
  STATIC_IP=$(gcloud compute addresses describe "$IP_NAME" --region="$REGION" --format="get(address)")

  gcloud compute instances delete-access-config "$INSTANCE_NAME" --access-config-name="external-nat" --zone="$ZONE" &>/dev/null || true
  gcloud compute instances add-access-config "$INSTANCE_NAME" --zone="$ZONE" --address="$STATIC_IP" --network-tier="$NETWORK_TIER"

  echo "‚úÖ ƒê√£ g√°n IP m·ªõi [$STATIC_IP] cho [$INSTANCE_NAME]"
}

# ---- remove_ip_from_vm (t·ª´ googleCL.sh) ----
remove_ip_from_vm() {
  echo "üì¶ L·∫•y danh s√°ch VM..."
  INSTANCES=($(gcloud compute instances list --format="value(name)"))
  [ ${#INSTANCES[@]} -eq 0 ] && echo "‚ùå Kh√¥ng c√≥ VM n√†o." && return

  echo "üíª Ch·ªçn VM ƒë·ªÉ xo√° IP:"
  select INSTANCE_NAME in "${INSTANCES[@]}"; do
    [ -n "$INSTANCE_NAME" ] && break
  done

  ZONE=$(gcloud compute instances list --filter="name=($INSTANCE_NAME)" --format="value(zone)" | rev | cut -d'/' -f1 | rev)
  NAT_IP=$(gcloud compute instances describe "$INSTANCE_NAME" --zone="$ZONE" --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
  [ -z "$NAT_IP" ] && echo "‚ö†Ô∏è VM kh√¥ng c√≥ IP c√¥ng c·ªông." && return

  read -p "‚ùì B·∫°n c√≥ ch·∫Øc mu·ªën xo√° IP kh·ªèi VM [$INSTANCE_NAME]? [Y/n]: " CONFIRM
  CONFIRM=${CONFIRM,,}
  [[ "$CONFIRM" =~ ^(n|no)$ ]] && echo "üö´ Hu·ª∑ thao t√°c." && return

  gcloud compute instances delete-access-config "$INSTANCE_NAME" --access-config-name="external-nat" --zone="$ZONE"
  echo "‚úÖ ƒê√£ xo√° IP kh·ªèi [$INSTANCE_NAME]"
}

# ---- cleanup_global_ips_direct (t·ª´ googleCL.sh) ----
cleanup_global_ips_direct() {
  echo "üß® Ki·ªÉm tra IP kh√¥ng d√πng..."
  mapfile -t IP_ENTRIES < <(gcloud compute addresses list --filter="status=RESERVED" --format="value(name,region)")
  [ ${#IP_ENTRIES[@]} -eq 0 ] && echo "‚úÖ Kh√¥ng c√≥ IP n√†o c·∫ßn xo√°." && return

  read -p "‚ö†Ô∏è X√°c nh·∫≠n xo√° ${#IP_ENTRIES[@]} IP kh√¥ng d√πng? [Y/n]: " confirm
  confirm=${confirm,,}
  [[ "$confirm" =~ ^(n|no)$ ]] && echo "üö´ Hu·ª∑ thao t√°c." && return

  for entry in "${IP_ENTRIES[@]}"; do
    IP_NAME=$(echo "$entry" | awk '{print $1}')
    REGION_URL=$(echo "$entry" | awk '{print $2}')
    REGION_NAME=$(basename "$REGION_URL")
    echo "‚ùå Xo√° IP [$IP_NAME] ·ªü [$REGION_NAME]..."
    gcloud compute addresses delete "$IP_NAME" --region="$REGION_NAME" --quiet
  done
  echo "‚úÖ ƒê√£ xo√° to√†n b·ªô IP kh√¥ng d√πng."
}

google_cloud_menu() {
  need_cmd gcloud || true
  echo -e "\n=== üå•Ô∏è  GOOGLE CLOUD MENU ==="
  echo "1) T·∫°o nhi·ªÅu VM"
  echo "2) ƒê·ªïi IP VM"
  echo "3) Xo√° t·∫•t c·∫£ IP kh√¥ng d√πng (to√†n b·ªô d·ª± √°n)"
  echo "4) Xo√° IP kh·ªèi 1 VM"
  echo "5) T·∫°o nhi·ªÅu IP tƒ©nh"
  echo "6) T·∫°o firewall rule (t√™n random)"
  echo "0) Quay l·∫°i"
  read -p "üëâ Nh·∫≠p l·ª±a ch·ªçn (0-6, m·∫∑c ƒë·ªãnh: 1): " MAIN_CHOICE
  MAIN_CHOICE=${MAIN_CHOICE:-1}

  case "$MAIN_CHOICE" in
    1) create_vm_flow ;;
    2) change_ip_flow ;;
    3) cleanup_global_ips_direct ;;
    4) remove_ip_from_vm ;;
    5) create_ip_batch ;;
    6) create_firewall_rule_random ;;
    0) return ;;
    *) echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá." ;;
  esac
  pause
}
show_proxy_file() {
  local file_path="/etc/lp"
  echo ""
  echo "----------------------------------------"
  echo "üìÑ Proxy ƒë·∫ßy ƒë·ªß:"
  if [ -f "$file_path" ]; then
    cat "$file_path"
  else
    echo "‚ùå Kh√¥ng t√¨m th·∫•y file proxy ·ªü $file_path"
  fi
  echo "----------------------------------------"
}

create_proxy_and_send_api() {
  local file_path="/etc/lp"

  read -p "üëâ B·∫°n c√≥ mu·ªën chuy·ªÉn sang quy·ªÅn root (sudo -i)? (y/N): " root_choice
  root_choice=${root_choice:-n}
  if [[ "$root_choice" =~ ^[Yy]$ ]]; then
    echo "üîê ƒêang chuy·ªÉn sang quy·ªÅn root..."
    sudo -i
    return
  fi

  read -p "üëâ B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i iptables + cron? (y/N): " update_ans
  update_ans=${update_ans:-n}
  if [[ "$update_ans" =~ ^[Yy]$ ]]; then
    echo "üîß ƒêang c·∫≠p nh·∫≠t v√† c√†i ƒë·∫∑t..."
    sudo apt update && sudo apt-get install --no-upgrade iptables cron -y
  else
    echo "‚è© B·ªè qua b∆∞·ªõc c·∫≠p nh·∫≠t."
  fi

  read -p "üëâ Nh·∫≠p T√™n SEVER: " server_name

  echo ""
  echo "üì° C·∫•u h√¨nh TCP/IP:"
  echo "1) iOS 1440 generic tunnel or VPN (4G-5G)"
  echo "2) iOS 1450 generic tunnel or VPN (4G-5G)"
  echo "3) iOS 1492 PPPoE (wifi)"
  echo "4) Android 1440 generic tunnel or VPN (4G-5G)"
  echo "5) Android 1450 generic tunnel or VPN (4G-5G)"
  echo "6) Android 1492 PPPoE (wifi)"
  echo "7) macOS 1492 PPPoE (wifi)"
  echo "8) Windows 1492 PPPoE (wifi)"
  echo "9) Windows 1440 generic tunnel or VPN (4G-5G)"

  while true; do
  clear
  echo "=============================="
  echo "         üåê MENU CH√çNH         "
  echo "=============================="
  echo "1) T·∫°o Proxy v√† g·ª≠i API"
  echo "2) Ch·ªâ hi·ªÉn th·ªã danh s√°ch Proxy"
  echo "3) T·∫°o nhi·ªÅu VM"
  echo "4) ƒê·ªïi IP VM"
  echo "5) Xo√° t·∫•t c·∫£ IP kh√¥ng d√πng (to√†n b·ªô d·ª± √°n)"
  echo "6) Xo√° IP kh·ªèi 1 VM"
  echo "7) T·∫°o nhi·ªÅu IP tƒ©nh"
  echo "8) T·∫°o firewall rule (t√™n random)"
  echo "0) Tho√°t"
  read -p "üëâ Nh·∫≠p l·ª±a ch·ªçn (Enter = m·∫∑c ƒë·ªãnh 1): " choice
  choice=${choice:-1}
  case "$choice" in
    1) create_proxy_and_send_api ;;
    2) show_proxy_file ;;
    3) create_vm_flow ;;
    4) change_ip_flow ;;
    5) cleanup_global_ips_direct ;;
    6) remove_ip_from_vm ;;
    7) create_ip_batch ;;
    8) create_firewall_rule_random ;;
    0) echo "üëã T·∫°m bi·ªát!"; exit 0 ;;
    *) echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.";;
  esac
  pause
done
