#!/bin/bash

# ======================== CH·ª®C NƒÇNG T·∫†O IP ========================
create_ip_batch() {
  echo -e "\nüåç Ch·ªçn khu v·ª±c t·∫°o IP:"
  echo "1) Tokyo (asia-northeast1)"
  echo "2) Osaka (asia-northeast2)"
  read -p "Nh·∫≠p s·ªë [1-2]: " REGION_CHOICE

  case $REGION_CHOICE in
    1) REGION="asia-northeast1" ;;
    2) REGION="asia-northeast2" ;;
    *) echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."; return ;;
  esac

  echo -e "\nüì∂ Ch·ªçn Network Tier cho IP:"
  echo "1) STANDARD (gi√° r·∫ª) üîπ"
  echo "2) PREMIUM"
  read -p "üí° Nh·∫≠p l·ª±a ch·ªçn [1-2] (m·∫∑c ƒë·ªãnh: 1): " TIER_OPTION
  TIER_OPTION=${TIER_OPTION:-1}
  if [ "$TIER_OPTION" == "1" ]; then
    NETWORK_TIER="STANDARD"
  else
    NETWORK_TIER="PREMIUM"
  fi

  read -p "üî¢ Nh·∫≠p s·ªë l∆∞·ª£ng IP mu·ªën t·∫°o: " IP_COUNT
  if ! [[ "$IP_COUNT" =~ ^[0-9]+$ ]] || [ "$IP_COUNT" -le 0 ]; then
    echo "‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá."; return
  fi

  echo -e "\nüöÄ ƒêang t·∫°o $IP_COUNT IP ($NETWORK_TIER) t·∫°i v√πng $REGION..."
  for ((i=1; i<=IP_COUNT; i++)); do
    IP_NAME="custom-ip-$RANDOM"
    if gcloud compute addresses create "$IP_NAME" --region="$REGION" --network-tier="$NETWORK_TIER" --quiet; then
      IP_ADDR=$(gcloud compute addresses describe "$IP_NAME" --region="$REGION" --format="get(address)")
      echo "‚úÖ ƒê√£ t·∫°o IP [$IP_ADDR] t√™n [$IP_NAME] t·∫°i [$REGION]"
    else
      echo "‚ùå Kh√¥ng th·ªÉ t·∫°o IP [$IP_NAME]. C√≥ th·ªÉ v∆∞·ª£t quota."
    fi
  done
}

# ======================== CH·ª®C NƒÇNG T·∫†O VM (C·∫¨P NH·∫¨T) ========================
create_vm_flow() {
  zones_tokyo=("asia-northeast1-a" "asia-northeast1-b" "asia-northeast1-c")
  zones_osaka=("asia-northeast2-a" "asia-northeast2-b" "asia-northeast2-c")

  echo -e "\nüåê T·∫°o VM ƒë·ªìng th·ªùi cho 2 v√πng: Tokyo v√† Osaka"

  read -p "üî¢ Nh·∫≠p s·ªë l∆∞·ª£ng VM t·∫°o cho Tokyo (nh·∫≠p 0 ƒë·ªÉ b·ªè qua, m·∫∑c ƒë·ªãnh 4): " COUNT_TOKYO
  COUNT_TOKYO=${COUNT_TOKYO:-4}
  if ! [[ "$COUNT_TOKYO" =~ ^[0-9]+$ ]] || [ "$COUNT_TOKYO" -lt 0 ]; then
    echo "‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. M·∫∑c ƒë·ªãnh l√† 4"
    COUNT_TOKYO=4
  fi

  read -p "‚úèÔ∏è Nh·∫≠p prefix ƒë·∫∑t t√™n VM cho Tokyo (m·∫∑c ƒë·ªãnh: tokyo): " PREFIX_TOKYO
  PREFIX_TOKYO=${PREFIX_TOKYO:-tokyo}

  read -p "üî¢ Nh·∫≠p s·ªë l∆∞·ª£ng VM t·∫°o cho Osaka (nh·∫≠p 0 ƒë·ªÉ b·ªè qua, m·∫∑c ƒë·ªãnh 4): " COUNT_OSAKA
  COUNT_OSAKA=${COUNT_OSAKA:-4}
  if ! [[ "$COUNT_OSAKA" =~ ^[0-9]+$ ]] || [ "$COUNT_OSAKA" -lt 0 ]; then
    echo "‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. M·∫∑c ƒë·ªãnh l√† 4"
    COUNT_OSAKA=4
  fi

  read -p "‚úèÔ∏è Nh·∫≠p prefix ƒë·∫∑t t√™n VM cho Osaka (m·∫∑c ƒë·ªãnh: osaka): " PREFIX_OSAKA
  PREFIX_OSAKA=${PREFIX_OSAKA:-osaka}

  echo -e "\nüåê Ch·ªçn lo·∫°i IP (√°p d·ª•ng cho c·∫£ 2 v√πng):"
  echo "1) C√≥ IP c√¥ng c·ªông (Public IP ‚Äì s·∫Ω g√°n IP tƒ©nh ri√™ng)"
  echo "2) Kh√¥ng c√≥ IP c√¥ng c·ªông (Private only)"
  read -p "üîå Nh·∫≠p l·ª±a ch·ªçn [1-2] (m·∫∑c ƒë·ªãnh: 1): " IP_OPTION
  IP_OPTION=${IP_OPTION:-1}

  if [ "$IP_OPTION" == "1" ]; then
    echo "üì∂ Ch·ªçn Network Tier cho IP:"
    echo "1) STANDARD (gi√° r·∫ª, ƒë·ªß d√πng) üîπ"
    echo "2) PREMIUM (∆∞u ti√™n m·∫°ng Google, gi√° cao h∆°n)"
    read -p "üí° Nh·∫≠p l·ª±a ch·ªçn [1-2] (m·∫∑c ƒë·ªãnh: 1): " TIER_OPTION
    TIER_OPTION=${TIER_OPTION:-1}
    if [ "$TIER_OPTION" == "1" ]; then
      NETWORK_TIER="STANDARD"
    else
      NETWORK_TIER="PREMIUM"
    fi
  fi

  create_vms_in_region() {
    local REGION=$1
    local ZONES=("${!2}")
    local COUNT=$3
    local PREFIX=$4

    if [ "$COUNT" -eq 0 ]; then
      echo "‚ö†Ô∏è B·ªè qua t·∫°o VM t·∫°i v√πng $REGION (s·ªë l∆∞·ª£ng = 0)"
      return
    fi

    echo -e "\nüöÄ ƒêang t·∫°o $COUNT VM t·∫°i v√πng: $REGION v·ªõi prefix t√™n: $PREFIX"

    for ((i=1; i<=COUNT; i++)); do
      ZONE="${ZONES[((i-1)%${#ZONES[@]})]}"
      num=$(printf "%02d" $((RANDOM % 100)))
      name="${PREFIX}${num}"

      if gcloud compute instances describe "$name" --zone="$ZONE" &>/dev/null; then
        echo "‚ö†Ô∏è VM $name ƒë√£ t·ªìn t·∫°i ·ªü $ZONE. B·ªè qua."
        continue
      fi

      if [ "$IP_OPTION" == "1" ]; then
        IP_NAME="ip-${name}"
        echo "‚öôÔ∏è T·∫°o IP tƒ©nh [$IP_NAME] trong v√πng [$REGION]..."
        if ! gcloud compute addresses create "$IP_NAME" --region="$REGION" --network-tier="$NETWORK_TIER" --quiet; then
          echo "‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c IP [$IP_NAME]. C√≥ th·ªÉ v∆∞·ª£t quota. B·ªè qua VM n√†y."
          continue
        fi
        STATIC_IP=$(gcloud compute addresses describe "$IP_NAME" --region="$REGION" --format="get(address)")
        echo "üõ†Ô∏è T·∫°o VM [$name] ·ªü $ZONE v·ªõi IP: $STATIC_IP"
        gcloud compute instances create "$name" \
          --zone="$ZONE" \
          --machine-type=e2-micro \
          --image=ubuntu-minimal-2404-noble-amd64-v20250624 \
          --image-project=ubuntu-os-cloud \
          --boot-disk-size=10GB \
          --address="$STATIC_IP" \
          --network-tier="$NETWORK_TIER"
        echo "$name,$STATIC_IP,$ZONE" >> created_vms.log
      else
        echo "üîí T·∫°o VM [$name] kh√¥ng c√≥ IP c√¥ng c·ªông ·ªü $ZONE"
        gcloud compute instances create "$name" \
          --zone="$ZONE" \
          --machine-type=e2-micro \
          --image=ubuntu-minimal-2404-noble-amd64-v20250624 \
          --image-project=ubuntu-os-cloud \
          --boot-disk-size=10GB \
          --no-address
        echo "$name,NONE,$ZONE" >> created_vms.log
      fi
      echo "‚úÖ ƒê√£ t·∫°o: $name"
    done
  }

  create_vms_in_region "asia-northeast1" zones_tokyo[@] "$COUNT_TOKYO" "$PREFIX_TOKYO"
  create_vms_in_region "asia-northeast2" zones_osaka[@] "$COUNT_OSAKA" "$PREFIX_OSAKA"
}

# ======================== CH·ª®C NƒÇNG ƒê·ªîI IP ========================
change_ip_flow() {
  echo "
üì¶ L·∫•y danh s√°ch VM..."
  INSTANCES=($(gcloud compute instances list --format="value(name)"))
  if [ ${#INSTANCES[@]} -eq 0 ]; then echo "‚ùå Kh√¥ng t√¨m th·∫•y VM n√†o."; exit 1; fi

  echo "üíª Ch·ªçn VM ƒë·ªÉ g√°n IP:"
  select INSTANCE_NAME in "${INSTANCES[@]}"; do
    if [ -n "$INSTANCE_NAME" ]; then break; else echo "‚ùó Ch·ªçn s·ªë h·ª£p l·ªá."; fi
  done

  ZONE=$(gcloud compute instances list --filter="name=($INSTANCE_NAME)" --format="value(zone)" | rev | cut -d'/' -f1 | rev)
  REGION=$(echo "$ZONE" | rev | cut -d'-' -f2- | rev)
  echo "
üìç VM [$INSTANCE_NAME] n·∫±m ·ªü ZONE: $ZONE | REGION: $REGION"

  echo "üì∂ Ch·ªçn Network Tier cho IP m·ªõi:"
  echo "1) STANDARD (gi√° r·∫ª) üîπ"
  echo "2) PREMIUM (m·∫∑c ƒë·ªãnh)"
  read -p "üí° Nh·∫≠p l·ª±a ch·ªçn [1-2] (m·∫∑c ƒë·ªãnh: 1): " TIER_OPTION
  TIER_OPTION=${TIER_OPTION:-1}
  if [ "$TIER_OPTION" == "1" ]; then
    NETWORK_TIER="STANDARD"
  else
    NETWORK_TIER="PREMIUM"
  fi

  IP_NAME="static-ip-$RANDOM"
  echo "
‚öôÔ∏è T·∫°o IP tƒ©nh [$IP_NAME] trong $REGION..."
  gcloud compute addresses create "$IP_NAME" --region="$REGION" --network-tier="$NETWORK_TIER" --quiet
  STATIC_IP=$(gcloud compute addresses describe "$IP_NAME" --region="$REGION" --format="get(address)")

  echo "üîó G√°n IP [$STATIC_IP] v√†o [$INSTANCE_NAME]..."
  gcloud compute instances delete-access-config "$INSTANCE_NAME" --access-config-name="external-nat" --zone="$ZONE" &>/dev/null
  gcloud compute instances add-access-config "$INSTANCE_NAME" \
    --access-config-name="external-nat" \
    --address="$STATIC_IP" \
    --zone="$ZONE" \
    --network-tier="$NETWORK_TIER"

  echo "‚úÖ VM [$INSTANCE_NAME] ƒë√£ g√°n IP m·ªõi: $STATIC_IP"
}

# ======================== XO√Å IP KH·ªéI VM ========================
remove_ip_from_vm() {
  echo "
üì¶ L·∫•y danh s√°ch VM..."
  INSTANCES=($(gcloud compute instances list --format="value(name)"))
  if [ ${#INSTANCES[@]} -eq 0 ]; then echo "‚ùå Kh√¥ng t√¨m th·∫•y VM n√†o."; exit 1; fi

  echo "üíª Ch·ªçn VM mu·ªën xo√° IP:"
  select INSTANCE_NAME in "${INSTANCES[@]}"; do
    if [ -n "$INSTANCE_NAME" ]; then break; else echo "‚ùó Ch·ªçn s·ªë h·ª£p l·ªá."; fi
  done

  ZONE=$(gcloud compute instances list --filter="name=($INSTANCE_NAME)" --format="value(zone)" | rev | cut -d'/' -f1 | rev)
  NAT_IP=$(gcloud compute instances describe "$INSTANCE_NAME" --zone="$ZONE" --format="get(networkInterfaces[0].accessConfigs[0].natIP)")

  if [ -z "$NAT_IP" ]; then
    echo "‚ö†Ô∏è VM [$INSTANCE_NAME] kh√¥ng c√≥ IP c√¥ng c·ªông ƒë·ªÉ xo√°."
    return
  fi

  echo "‚ö†Ô∏è VM [$INSTANCE_NAME] ƒëang c√≥ IP: $NAT_IP"
  read -p "‚ùì B·∫°n c√≥ ch·∫Øc mu·ªën xo√° IP kh·ªèi VM n√†y? [Y/n]: " CONFIRM
  CONFIRM=${CONFIRM,,}
  if [[ "$CONFIRM" == "n" || "$CONFIRM" == "no" ]]; then
    echo "üö´ Hu·ª∑ thao t√°c xo√° IP."
    return
  fi

  echo "‚ùå ƒêang xo√° IP kh·ªèi [$INSTANCE_NAME]..."
  gcloud compute instances delete-access-config "$INSTANCE_NAME" --access-config-name="external-nat" --zone="$ZONE"
  echo "‚úÖ ƒê√£ xo√° IP kh·ªèi VM [$INSTANCE_NAME]"
}

# ======================== MENU CH√çNH ========================
while true; do
  clear
  echo "==================== QU·∫¢N L√ù VM GCP ===================="
  echo "1) T·∫°o VM Tokyo & Osaka"
  echo "2) T·∫°o IP tƒ©nh"
  echo "3) ƒê·ªïi IP tƒ©nh cho VM"
  echo "4) Xo√° IP c√¥ng c·ªông kh·ªèi VM"
  echo "5) Tho√°t"
  read -p "Ch·ªçn ch·ª©c nƒÉng [1-5]: " CHOICE

  case $CHOICE in
    1) create_vm_flow ;;
    2) create_ip_batch ;;
    3) change_ip_flow ;;
    4) remove_ip_from_vm ;;
    5) echo "üëã Bye!"; exit 0 ;;
    *) echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá." ; sleep 1 ;;
  esac
  echo -e "\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..."
  read
done
